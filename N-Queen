#include <iostream>
using namespace std;

const int MAX = 100;

// Function to check if it's safe to place a queen in a particular cell
bool isSafe(int board[][MAX], int n, int row, int col) {
    // Check the row
    for (int i = 0; i < col; i++) {
        if (board[row][i] == 1) {
            return false;
        }
    }

    // Check the upper-left diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // Check the lower-left diagonal
    for (int i = row, j = col; i < n && j >= 0; i++, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    return true;
}

// Recursive function to solve the N-Queens problem
bool solveNQueens(int board[][MAX], int n, int col) {
    if (col == n) {
        // All queens are successfully placed, print the board
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cout << board[i][j] << " ";
            }
            cout << endl;
        }
        cout << endl;
        return true;
    }

    bool result = false;
    for (int i = 0; i < n; i++) {
        if (isSafe(board, n, i, col)) {
            board[i][col] = 1; // Place a queen

            // Recur for the next column
            result = solveNQueens(board, n, col + 1) || result;

            // If placing a queen in the current cell doesn't lead to a solution, backtrack
            board[i][col] = 0;
        }
    }

    return result;
}

int main() {
    int n;
    cout << "Enter the size of the chessboard (N): ";
    cin >> n;

    int board[MAX][MAX] = {0}; // Initialize the chessboard

    if (solveNQueens(board, n, 0)) {
        cout << "Solutions found for N-Queens problem with N = " << n << "." << endl;
    } else {
        cout << "No solutions found for N-Queens problem with N = " << n << "." << endl;
    }

    return 0;
}
